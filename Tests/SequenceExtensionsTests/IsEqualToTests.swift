import XCTest
@testable import SequenceExtensions

class IsEqualToTests: XCTestCase {
  func testShouldReturnCorrectValueAndType () {
    XCTAssertTrue([(Int, Int)]() == [(Int, Int)]())
    XCTAssertFalse([(Int, Int)]() == [(0, 0)])
    XCTAssertFalse([(Int, Int)]() == [(0, 0), (0, 0)])
    XCTAssertFalse([(0, 0)] == [(Int, Int)]())
    XCTAssertTrue([(0, 0)] == [(0, 0)])
    XCTAssertFalse([(0, 0)] == [(1, 1)])
    XCTAssertFalse([(0, 0)] == [(0, 0), (0, 0)])
    XCTAssertFalse([(0, 0), (0, 0)] == [(Int, Int)]())
    XCTAssertFalse([(0, 0), (0, 0)] == [(0, 0)])
    XCTAssertTrue([(0, 0), (0, 0)] == [(0, 0), (0, 0)])
    XCTAssertFalse([(0, 0), (0, 0)] == [(1, 1), (1, 1)])

    XCTAssertTrue([(Int, Int, Int)]() == [(Int, Int, Int)]())
    XCTAssertFalse([(Int, Int, Int)]() == [(0, 0, 0)])
    XCTAssertFalse([(Int, Int, Int)]() == [(0, 0, 0), (0, 0, 0)])
    XCTAssertFalse([(0, 0, 0)] == [(Int, Int, Int)]())
    XCTAssertTrue([(0, 0, 0)] == [(0, 0, 0)])
    XCTAssertFalse([(0, 0, 0)] == [(1, 1, 1)])
    XCTAssertFalse([(0, 0, 0)] == [(0, 0, 0), (0, 0, 0)])
    XCTAssertFalse([(0, 0, 0), (0, 0, 0)] == [(Int, Int, Int)]())
    XCTAssertFalse([(0, 0, 0), (0, 0, 0)] == [(0, 0, 0)])
    XCTAssertTrue([(0, 0, 0), (0, 0, 0)] == [(0, 0, 0), (0, 0, 0)])
    XCTAssertFalse([(0, 0, 0), (0, 0, 0)] == [(1, 1, 1), (1, 1, 1)])

    XCTAssertTrue([(Int, Int, Int, Int)]() == [(Int, Int, Int, Int)]())
    XCTAssertFalse([(Int, Int, Int, Int)]() == [(0, 0, 0, 0)])
    XCTAssertFalse([(Int, Int, Int, Int)]() == [(0, 0, 0, 0), (0, 0, 0, 0)])
    XCTAssertFalse([(0, 0, 0, 0)] == [(Int, Int, Int, Int)]())
    XCTAssertTrue([(0, 0, 0, 0)] == [(0, 0, 0, 0)])
    XCTAssertFalse([(0, 0, 0, 0)] == [(1, 1, 1, 1)])
    XCTAssertFalse([(0, 0, 0, 0)] == [(0, 0, 0, 0), (0, 0, 0, 0)])
    XCTAssertFalse([(0, 0, 0, 0), (0, 0, 0, 0)] == [(Int, Int, Int, Int)]())
    XCTAssertFalse([(0, 0, 0, 0), (0, 0, 0, 0)] == [(0, 0, 0, 0)])
    XCTAssertTrue([(0, 0, 0, 0), (0, 0, 0, 0)] == [(0, 0, 0, 0), (0, 0, 0, 0)])
    XCTAssertFalse([(0, 0, 0, 0), (0, 0, 0, 0)] == [(1, 1, 1, 1), (1, 1, 1, 1)])

    XCTAssertTrue([(Int, Int, Int, Int, Int)]() == [(Int, Int, Int, Int, Int)]())
    XCTAssertFalse([(Int, Int, Int, Int, Int)]() == [(0, 0, 0, 0, 0)])
    XCTAssertFalse([(Int, Int, Int, Int, Int)]() == [(0, 0, 0, 0, 0), (0, 0, 0, 0, 0)])
    XCTAssertFalse([(0, 0, 0, 0, 0)] == [(Int, Int, Int, Int, Int)]())
    XCTAssertTrue([(0, 0, 0, 0, 0)] == [(0, 0, 0, 0, 0)])
    XCTAssertFalse([(0, 0, 0, 0, 0)] == [(1, 1, 1, 1, 1)])
    XCTAssertFalse([(0, 0, 0, 0, 0)] == [(0, 0, 0, 0, 0), (0, 0, 0, 0, 0)])
    XCTAssertFalse([(0, 0, 0, 0, 0), (0, 0, 0, 0, 0)] == [(Int, Int, Int, Int, Int)]())
    XCTAssertFalse([(0, 0, 0, 0, 0), (0, 0, 0, 0, 0)] == [(0, 0, 0, 0, 0)])
    XCTAssertTrue([(0, 0, 0, 0, 0), (0, 0, 0, 0, 0)] == [(0, 0, 0, 0, 0), (0, 0, 0, 0, 0)])
    XCTAssertFalse([(0, 0, 0, 0, 0), (0, 0, 0, 0, 0)] == [(1, 1, 1, 1, 1), (1, 1, 1, 1, 1)])

    XCTAssertTrue([(Int, Int, Int, Int, Int, Int)]() == [(Int, Int, Int, Int, Int, Int)]())
    XCTAssertFalse([(Int, Int, Int, Int, Int, Int)]() == [(0, 0, 0, 0, 0, 0)])
    XCTAssertFalse([(Int, Int, Int, Int, Int, Int)]() == [(0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0)])
    XCTAssertFalse([(0, 0, 0, 0, 0, 0)] == [(Int, Int, Int, Int, Int, Int)]())
    XCTAssertTrue([(0, 0, 0, 0, 0, 0)] == [(0, 0, 0, 0, 0, 0)])
    XCTAssertFalse([(0, 0, 0, 0, 0, 0)] == [(1, 1, 1, 1, 1, 1)])
    XCTAssertFalse([(0, 0, 0, 0, 0, 0)] == [(0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0)])
    XCTAssertFalse([(0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0)] == [(Int, Int, Int, Int, Int, Int)]())
    XCTAssertFalse([(0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0)] == [(0, 0, 0, 0, 0, 0)])
    XCTAssertTrue([(0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0)] == [(0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0)])
    XCTAssertFalse([(0, 0, 0, 0, 0, 0), (0, 0, 0, 0, 0, 0)] == [(1, 1, 1, 1, 1, 1), (1, 1, 1, 1, 1, 1)])
  }
}
