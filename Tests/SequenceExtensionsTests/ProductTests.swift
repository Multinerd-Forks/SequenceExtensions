import XCTest
@testable import SequenceExtensions

class ProductTests: XCTestCase {
  func testShouldReturnCorrectType () {
    XCTAssertTrue(type(of: product([1, 2], [3, 4])) == AnySequence<(Int, Int)>.self)
    XCTAssertTrue(type(of: product([1, 2], [3, 4], [5, 6])) == AnySequence<(Int, Int, Int)>.self)
    XCTAssertTrue(type(of: product([1, 2], [3, 4], [5, 6], [7, 8])) == AnySequence<(Int, Int, Int, Int)>.self)
    XCTAssertTrue(type(of: product([1, 2], [3, 4], [5, 6], [7, 8], [9, 10])) == AnySequence<(Int, Int, Int, Int,
      Int)>.self)
    XCTAssertTrue(type(of: product([1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12])) == AnySequence<(Int, Int, Int,
      Int, Int, Int)>.self)
  }

  func testShouldReturnCorrectValue () {
    XCTAssertTrue(Array(product([], [])) == [(Int, Int)]())
    XCTAssertTrue(Array(product([1, 2], [])) == [(Int, Int)]())
    XCTAssertTrue(Array(product([], [1, 2])) == [(Int, Int)]())
    XCTAssertTrue(Array(product([1, 2], [3, 4])) == [(1, 3), (1, 4), (2, 3), (2, 4)])

    XCTAssertTrue(Array(product([], [], [])) == [(Int, Int, Int)]())
    XCTAssertTrue(Array(product([1, 2], [3, 4], [])) == [(Int, Int, Int)]())
    XCTAssertTrue(Array(product([], [1, 2], [3, 4])) == [(Int, Int, Int)]())
    XCTAssertTrue(Array(product([1, 2], [3, 4], [5, 6])) == [(1, 3, 5), (1, 3, 6), (1, 4, 5), (1, 4, 6), (2, 3, 5), (2,
      3, 6), (2, 4, 5), (2, 4, 6)])

    XCTAssertTrue(Array(product([], [], [], [])) == [(Int, Int, Int, Int)]())
    XCTAssertTrue(Array(product([1, 2], [3, 4], [5, 6], [])) == [(Int, Int, Int, Int)]())
    XCTAssertTrue(Array(product([], [1, 2], [3, 4], [5, 6])) == [(Int, Int, Int, Int)]())
    XCTAssertTrue(Array(product([1, 2], [3, 4], [5, 6], [7, 8])) == [(1, 3, 5, 7), (1, 3, 5, 8), (1, 3, 6, 7), (1, 3,
      6, 8), (1, 4, 5, 7), (1, 4, 5, 8), (1, 4, 6, 7), (1, 4, 6, 8), (2, 3, 5, 7), (2, 3, 5, 8), (2, 3, 6, 7), (2, 3,
      6, 8), (2, 4, 5, 7), (2, 4, 5, 8), (2, 4, 6, 7), (2, 4, 6, 8)])

    XCTAssertTrue(Array(product([], [], [], [], [])) == [(Int, Int, Int, Int, Int)]())
    XCTAssertTrue(Array(product([1, 2], [3, 4], [5, 6], [7, 8], [])) == [(Int, Int, Int, Int, Int)]())
    XCTAssertTrue(Array(product([], [1, 2], [3, 4], [5, 6], [7, 8])) == [(Int, Int, Int, Int, Int)]())
    XCTAssertTrue(Array(product([1, 2], [3, 4], [5, 6], [7, 8], [9, 10])) == [(1, 3, 5, 7, 9), (1, 3, 5, 7, 10), (1, 3,
      5, 8, 9), (1, 3, 5, 8, 10), (1, 3, 6, 7, 9), (1, 3, 6, 7, 10), (1, 3, 6, 8, 9), (1, 3, 6, 8, 10), (1, 4, 5, 7,
      9), (1, 4, 5, 7, 10), (1, 4, 5, 8, 9), (1, 4, 5, 8, 10), (1, 4, 6, 7, 9), (1, 4, 6, 7, 10), (1, 4, 6, 8, 9), (1,
      4, 6, 8, 10), (2, 3, 5, 7, 9), (2, 3, 5, 7, 10), (2, 3, 5, 8, 9), (2, 3, 5, 8, 10), (2, 3, 6, 7, 9), (2, 3, 6, 7,
      10), (2, 3, 6, 8, 9), (2, 3, 6, 8, 10), (2, 4, 5, 7, 9), (2, 4, 5, 7, 10), (2, 4, 5, 8, 9), (2, 4, 5, 8, 10), (2,
      4, 6, 7, 9), (2, 4, 6, 7, 10), (2, 4, 6, 8, 9), (2, 4, 6, 8, 10)])

    XCTAssertTrue(Array(product([], [], [], [], [], [])) == [(Int, Int, Int, Int, Int, Int)]())
    XCTAssertTrue(Array(product([1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [])) == [(Int, Int, Int, Int, Int, Int)]())
    XCTAssertTrue(Array(product([], [1, 2], [3, 4], [5, 6], [7, 8], [9, 10])) == [(Int, Int, Int, Int, Int, Int)]())
    XCTAssertTrue(Array(product([1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12])) == [(1, 3, 5, 7, 9, 11), (1, 3, 5,
      7, 9, 12), (1, 3, 5, 7, 10, 11), (1, 3, 5, 7, 10, 12), (1, 3, 5, 8, 9, 11), (1, 3, 5, 8, 9, 12), (1, 3, 5, 8, 10,
      11), (1, 3, 5, 8, 10, 12), (1, 3, 6, 7, 9, 11), (1, 3, 6, 7, 9, 12), (1, 3, 6, 7, 10, 11), (1, 3, 6, 7, 10, 12),
      (1, 3, 6, 8, 9, 11), (1, 3, 6, 8, 9, 12), (1, 3, 6, 8, 10, 11), (1, 3, 6, 8, 10, 12), (1, 4, 5, 7, 9, 11), (1, 4,
      5, 7, 9, 12), (1, 4, 5, 7, 10, 11), (1, 4, 5, 7, 10, 12), (1, 4, 5, 8, 9, 11), (1, 4, 5, 8, 9, 12), (1, 4, 5, 8,
      10, 11), (1, 4, 5, 8, 10, 12), (1, 4, 6, 7, 9, 11), (1, 4, 6, 7, 9, 12), (1, 4, 6, 7, 10, 11), (1, 4, 6, 7, 10,
      12), (1, 4, 6, 8, 9, 11), (1, 4, 6, 8, 9, 12), (1, 4, 6, 8, 10, 11), (1, 4, 6, 8, 10, 12), (2, 3, 5, 7, 9, 11),
      (2, 3, 5, 7, 9, 12), (2, 3, 5, 7, 10, 11), (2, 3, 5, 7, 10, 12), (2, 3, 5, 8, 9, 11), (2, 3, 5, 8, 9, 12), (2, 3,
      5, 8, 10, 11), (2, 3, 5, 8, 10, 12), (2, 3, 6, 7, 9, 11), (2, 3, 6, 7, 9, 12), (2, 3, 6, 7, 10, 11), (2, 3, 6, 7,
      10, 12), (2, 3, 6, 8, 9, 11), (2, 3, 6, 8, 9, 12), (2, 3, 6, 8, 10, 11), (2, 3, 6, 8, 10, 12), (2, 4, 5, 7, 9,
      11), (2, 4, 5, 7, 9, 12), (2, 4, 5, 7, 10, 11), (2, 4, 5, 7, 10, 12), (2, 4, 5, 8, 9, 11), (2, 4, 5, 8, 9, 12),
      (2, 4, 5, 8, 10, 11), (2, 4, 5, 8, 10, 12), (2, 4, 6, 7, 9, 11), (2, 4, 6, 7, 9, 12), (2, 4, 6, 7, 10, 11), (2,
      4, 6, 7, 10, 12), (2, 4, 6, 8, 9, 11), (2, 4, 6, 8, 9, 12), (2, 4, 6, 8, 10, 11), (2, 4, 6, 8, 10, 12)])
  }
}
